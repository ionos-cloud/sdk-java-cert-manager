/*
 * Certificate Manager Service API
 * Using the Certificate Manager Service, you can conveniently provision and manage SSL certificates with IONOS services and your internal connected resources. For the [Application Load Balancer](https://api.ionos.com/docs/cloud/v6/#Application-Load-Balancers-get-datacenters-datacenterId-applicationloadbalancers), you usually need a certificate to encrypt your HTTPS traffic.  The service provides the basic functions of uploading and deleting your certificates for this purpose.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ionoscloud.certmanager.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ConfigPropertyDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-05T11:15:43.234Z[Etc/UTC]")

public class ConfigPropertyDto {
  
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;


  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;


  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;


  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  

   /**
   * The property id.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The property id.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }



  public ConfigPropertyDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The property name.
   * @return name
  **/
  @ApiModelProperty(required = true, value = "The property name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }



  public ConfigPropertyDto value(String value) {
    
    this.value = value;
    return this;
  }

   /**
   * The property value.
   * @return value
  **/
  @ApiModelProperty(required = true, value = "The property value.")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }



  public ConfigPropertyDto description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The property description.
   * @return description
  **/
  @ApiModelProperty(required = true, value = "The property description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigPropertyDto configPropertyDto = (ConfigPropertyDto) o;
    return Objects.equals(this.id, configPropertyDto.id) && Objects.equals(this.name, configPropertyDto.name) && Objects.equals(this.value, configPropertyDto.value) && Objects.equals(this.description, configPropertyDto.description);
  }




  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigPropertyDto {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");

    sb.append("    value: ").append(toIndentedString(value)).append("\n");

    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
